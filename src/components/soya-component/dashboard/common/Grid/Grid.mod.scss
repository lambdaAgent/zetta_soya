@import "../../shared/scss/abstracts/variables";
@import "../../shared/scss/abstracts/mixins";

// Inspired by https://gist.github.com/Leimi/608d15fbacc95976f96d#file-_grid-scss-L107

// common styling applied to any column (class="col-*" in bootstrap)
// /!\ you should not use this directly and see the column mixin
%columnDefaultStyles {
  box-sizing: border-box;
  position: relative;
  float: left;
  padding-left: $grid-gutter-width;
  padding-right: $grid-gutter-width;
}

// common styling applied to any row (class="row" in bootstrap)
// /!\ you should not use this directly and see the row mixin
%rowDefaultStyles {
  @include clearfix;
  clear: auto;
  margin-left: -$grid-gutter-width;
  margin-right: -$grid-gutter-width;
}

// common styling applied to any container (class="container" in bootstrap)
// /!\ you should not use this directly and see the row mixin
%containerDefaultStyles {
  @include clearfix;
  margin-left: auto;
  margin-right: auto;
  padding-left: $grid-gutter-width;
  padding-right: $grid-gutter-width;
}

/// set something to behave as a row (like having a class="row" on your element in a bootstrap project)
@mixin make-row() {
  @extend %rowDefaultStyles;
}

/// set something to behave as a container (like having a class="container" on your element in a bootstrap project)
@mixin make-container() {
  @extend %containerDefaultStyles;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-widths($widths: $container-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-width in $widths {
    @include media-breakpoint-only($breakpoint, $breakpoints) {
      width: $container-width;
    }
  }
}

//////////////////////////////

// example!
//
// `<div class="MyComponent-wrapper">
//    <div class="MyComponent-child"></div>
//    <div class="MyComponent-child"></div>
//    <div class="MyComponent-child"></div>
//  </div>`
//  .MyComponent-wrapper {
//    @include row;
//  }
//    .MyComponent-child {
//      @include column( (small: 12, tablet: 4, wide: 2) );
//    }
//
// is the same as:
// `<div class="MyComponent-wrapper row">
//    <div class="MyComponent-child col-xs-12 col-md-4 col-lg-2"></div>
//    <div class="MyComponent-child col-xs-12 col-md-4 col-lg-2"></div>
//    <div class="MyComponent-child col-xs-12 col-md-4 col-lg-2"></div>
//  </div>`

///////////////////////////////

@mixin make-col($size, $columns: $grid-columns) {
  width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  } @else if $type == col {
    @include make-col($size, $columns);
  }
}

@mixin make-grid-classes() {
  .row {
    @include make-row();
  }

  .container {
    @include make-container();
    @include make-container-widths();
  }

  .container-fluid {
    @include make-container();
  }

  $list: ".col-1";
  @for $i from 2 through $grid-columns {
    $list: "#{$list}, .col-#{$i}";
  }
  #{$list} {
    @extend %columnDefaultStyles;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      @include make-col-modifier(col, $i, $grid-columns)
    }
  }

  @each $modifier in (pull, push) {
    @for $i from 0 through $grid-columns {
      .#{$modifier}-#{$i} {
        @include make-col-modifier($modifier, $i, $grid-columns)
      }
    }
  }

  // `$columns - 1` because offsetting by the width of an entire row isn't possible
  @for $i from 0 through ($grid-columns - 1) {
    @if $i != 0 { // Avoid emitting useless .offset-xs-0
      .offset-#{$i} {
        @include make-col-modifier(offset, $i, $grid-columns)
      }
    }
  }
}

// if you want the exact same thing as bootstrap,
// you will need to insert their "scaffolding code"
// (normalize.css + default stylings on body, html, etc.)
@include make-grid-classes();